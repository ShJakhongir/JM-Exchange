from aiogram import types, F, Router #Router –¥–ª—è –∑–∞–º–µ–Ω—ã dp , —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–Ω–∞–ª–∞ –≥–¥–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.db import create_order
from app.database.db import init_db
from app.database.db import register_user
from app.database.db import get_user_count
import app.keyboard as kb
import aiohttp
import uuid

router = Router()
API_KEY = "Ug9Z67HybDWc4vcm7dABjitoicgf2xKF7YrGMFJ8tfNhViZPeNVCE36ife6FjkBN"

@router.message(CommandStart())
async def main_start(message: Message):
    init_db() #–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    register_user(user_id, username, first_name, last_name)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}üëã!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã", 
                        reply_markup= kb.main)

@router.message(Command('user_count'))
async def cmd_user_count(message: types.Message):
    user_count = get_user_count()
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}")

@router.callback_query(F.data == 'change')
async def change_main(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞', 
                                     reply_markup= await kb.reply_change_course())
    

async def get_price(symbol: str):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}USDT"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return float(data["price"])


class BuyTONState(StatesGroup):
    waiting_ton_quantity = State()

@router.callback_query(F.data == "Actual_course_üíéTon")
async def show_ton_course(callback: CallbackQuery,state: FSMContext):
    await callback.message.edit_text("üó≥–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å" , reply_markup= kb.command_exit)
    await state.set_state(BuyTONState.waiting_ton_quantity)
    await state.update_data(callback_message=callback.message.message_id)

@router.message(BuyTONState.waiting_ton_quantity)
async def calculate_ton_price(message: types.Message, state: FSMContext):
    try:
        quantity_ton = float(message.text)
        price = await get_price('TON')
        if price > 0:
            result_ton = (((quantity_ton * price) + quantity_ton * price * 0.1) * 87 )

            await state.set_state(BuyTONState.waiting_ton_quantity)

            await state.update_data(
                quantity=quantity_ton,
                total=result_ton,
                currency="RUB",
                token="TON"
            )

            data = await state.get_data()
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Stars:", data)
            await message.answer(f"üî∫–ó–∞ {quantity_ton} TON, –≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ: {result_ton:.2f} —Ä—É–±–ª–µ–π",  reply_markup=kb.command_exit_2)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å TON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=kb.command_exit)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=kb.command_exit)


#Price for stars 
class BuyStarsState(StatesGroup):
    waiting_for_quantity = State()

@router.callback_query(F.data == 'Actual_course_üåüStars')
async def ask_quantity(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üó≥–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",reply_markup=kb.command_exit)
    await state.set_state(BuyStarsState.waiting_for_quantity)
    await state.update_data(callback_message=callback.message.message_id)

@router.message(BuyStarsState.waiting_for_quantity)
async def calculate_price(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text)

        if 50 <= quantity < 500:
            result = (quantity / 50) * 85
        elif 500 <= quantity < 3000 :
            result = (quantity / 50) * 82.5
        elif quantity >= 3000 :
            result = (quantity / 50) * 80
        else:
            await message.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å Stars –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª-–≤–æ 50 –∑–≤—ë–∑–¥", reply_markup=kb.command_exit)
            return 
        
        await state.set_state(BuyStarsState.waiting_for_quantity)

        await state.update_data(
            quantity=quantity,
            total=result,
            currency="RUB",
            token="Stars"
        )

        data = await state.get_data()
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Stars:", data)

        await message.answer(f"üî∫–ó–∞ {quantity} Stars, –≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ: {result:.2f} —Ä—É–±–ª–µ–π", reply_markup=kb.command_exit_2)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=kb.command_exit)


@router.callback_query(F.data == 'buy_now')
async def buy_now(callback: CallbackQuery, state: FSMContext):
   await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb.payment_keyboard)
   await callback.answer('')
   

#–û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ
@router.callback_query(F.data == 'pay_card')
async def process_pay_card(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data() 
    print("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –∫–∞—Ä—Ç–æ–π:", data)

    if not data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    user_id = callback.from_user.id
    quantity = data.get("quantity")
    total = data.get("total")
    currency = data.get("currency")
    token = data.get("token")

    if not quantity or not total:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    order_id = str(uuid.uuid4()).split('-')[0]

    create_order(
        user_id=user_id,
        order_id=order_id,
        amount=total  
    )

    CARD_NUMBER = "2202 2009 0516 7118"
    CARD_NAME = "–¢–∞—Ö–º–∏–Ω–∞ –®"

    payment_text = (
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {quantity} {token}\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: {total:.4f} {currency}\n\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"–ö–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫: `{CARD_NUMBER}`\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {CARD_NAME}\n\n"
        f"‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É:\n"
        f"`{order_id}`\n\n"
        f"‚ö†Ô∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
       
    )
    await callback.message.edit_text(payment_text, parse_mode= "Markdown", reply_markup=kb.paid_main)
    await callback.answer()

@router.callback_query(F.data == 'paid')
async def paid_call(callback: CallbackQuery):
    await callback.message.answer('üßæ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–∑—É —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É‚ùóÔ∏è', reply_markup=kb.manager_callback)

@router.callback_query(F.data == "Actual_course_–ù–∞–∑–∞–¥")
async def exit_command(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(f"‚ú®–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã", 
                                     reply_markup=kb.main)
    

@router.callback_query(F.data == "Exit")
async def exit_command(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞', 
                                     reply_markup= await kb.reply_change_course())
    

@router.callback_query(F.data == "Exit_2")
async def exit_command(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞', 
                                     reply_markup= await kb.reply_change_course())
    

@router.callback_query(F.data == "pay_exit")
async def exit_command(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞', 
                                     reply_markup= await kb.reply_change_course())
    


